# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
name: 'Terraform'

on:
  workflow_run:
    workflows: ["Deploy to ECR"]
    types:
      - completed
  
env:
  USERNAME: ${{ secrets.USERNAME }}
  PASSWORD: ${{ secrets.PASSWORD }}
  DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
  ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID }}
  SECRET_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  REGION_NAME: ${{ secrets.REGION_NAME }}
  USER_AGENT: ${{ secrets.USER_AGENT }}
  CLIENT_ID: ${{ secrets.CLIENT_ID }}
  CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
  NUM_POSTS: ${{ secrets.NUM_POSTS }}
  SUBREDDIT_NAME: ${{ secrets.SUBREDDIT_NAME }}
  BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
  HOST: ${{ secrets.HOST }}

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    
    - name: Change Directory
      run: cd Terraform

    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan and Apply
      if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      run: |
        terraform plan -input=false -var "username=$USERNAME" -var "password=$PASSWORD" -var "database_name=$DATABASE_NAME" -var "access_key=$ACCESS_KEY" -var "secret_key=$SECRET_KEY" -var "region_name=$REGION_NAME" -var "user_agent=$USER_AGENT" -var "client_id=$CLIENT_ID" -var "client_secret=$CLIENT_SECRET" -var "num_posts=$NUM_POSTS" -var "subreddit_name=$SUBREDDIT_NAME" -var "bucket_name=$BUCKET_NAME" -var "host=$HOST"
        terraform destroy -auto-approve -target "aws_ecs_task_definition.sentiment-task" -var "username=$USERNAME" -var "password=$PASSWORD" -var "database_name=$DATABASE_NAME" -var "access_key=$ACCESS_KEY" -var "secret_key=$SECRET_KEY" -var "region_name=$REGION_NAME" -var "user_agent=$USER_AGENT" -var "client_id=$CLIENT_ID" -var "client_secret=$CLIENT_SECRET" -var "num_posts=$NUM_POSTS" -var "subreddit_name=$SUBREDDIT_NAME" -var "bucket_name=$BUCKET_NAME" -var "host=$HOST"
        terraform apply -auto-approve -var "username=$USERNAME" -var "password=$PASSWORD" -var "database_name=$DATABASE_NAME" -var "access_key=$ACCESS_KEY" -var "secret_key=$SECRET_KEY" -var "region_name=$REGION_NAME" -var "user_agent=$USER_AGENT" -var "client_id=$CLIENT_ID" -var "client_secret=$CLIENT_SECRET" -var "num_posts=$NUM_POSTS" -var "subreddit_name=$SUBREDDIT_NAME" -var "bucket_name=$BUCKET_NAME" -var "host=$HOST"
